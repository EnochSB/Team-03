# Generated by Django 3.2.18 on 2023-05-03 07:43

import dinings.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AtmosphereTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dining',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('content', models.TextField(null=True)),
                ('image1', models.ImageField(blank=True, upload_to=dinings.models.dining_img_path)),
                ('image2', models.ImageField(blank=True, upload_to=dinings.models.dining_img_path)),
                ('image3', models.ImageField(blank=True, upload_to=dinings.models.dining_img_path)),
                ('image4', models.ImageField(blank=True, upload_to=dinings.models.dining_img_path)),
                ('image5', models.ImageField(blank=True, upload_to=dinings.models.dining_img_path)),
                ('address_mc_do', models.CharField(max_length=20)),
                ('address_city', models.CharField(max_length=20)),
                ('address_dong', models.CharField(max_length=20)),
                ('address_detail', models.CharField(max_length=20)),
                ('opening_hours', models.CharField(max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('like_users', models.ManyToManyField(related_name='like_dinings', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='FacilityaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PurposeTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True)),
                ('image1', models.ImageField(blank=True, upload_to=dinings.models.review_img_path)),
                ('image2', models.ImageField(blank=True, upload_to=dinings.models.review_img_path)),
                ('image3', models.ImageField(blank=True, upload_to=dinings.models.review_img_path)),
                ('image4', models.ImageField(blank=True, upload_to=dinings.models.review_img_path)),
                ('image5', models.ImageField(blank=True, upload_to=dinings.models.review_img_path)),
                ('rating', models.FloatField(verbose_name='평점')),
                ('rating_taste', models.FloatField(verbose_name='맛')),
                ('rating_price', models.FloatField(verbose_name='가격')),
                ('rating_kind', models.FloatField(verbose_name='서비스')),
                ('atmosphere_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='atmosphere_tags', through='dinings.AtmosphereTaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('dining', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dinings.dining')),
                ('facility_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='facility_tags', through='dinings.FacilityaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('like_users', models.ManyToManyField(related_name='like_reviews', to=settings.AUTH_USER_MODEL)),
                ('purpose_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='purpose_tags', through='dinings.PurposeTaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='purposetaggeditem',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purpose_tagged_items', to='dinings.review'),
        ),
        migrations.AddField(
            model_name='purposetaggeditem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_purposetaggeditem_items', to='taggit.tag'),
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('price', models.PositiveIntegerField()),
                ('dining', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dinings.dining')),
            ],
        ),
        migrations.AddField(
            model_name='facilityaggeditem',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facility_tagged_items', to='dinings.review'),
        ),
        migrations.AddField(
            model_name='facilityaggeditem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_facilityaggeditem_items', to='taggit.tag'),
        ),
        migrations.AddField(
            model_name='atmospheretaggeditem',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='atmosphere_tagged_items', to='dinings.review'),
        ),
        migrations.AddField(
            model_name='atmospheretaggeditem',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_atmospheretaggeditem_items', to='taggit.tag'),
        ),
    ]
