# Generated by Django 3.2.18 on 2023-04-28 08:40

import dinings.models
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('dinings', '0003_alter_dining_address_detail'),
    ]

    operations = [
        migrations.AddField(
            model_name='review',
            name='rating_kind',
            field=models.FloatField(default=5),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='review',
            name='rating_price',
            field=models.FloatField(default=5),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='review',
            name='rating_taste',
            field=models.FloatField(default=5),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='review',
            name='image1',
            field=models.ImageField(blank=True, upload_to=dinings.models.review_img_path),
        ),
        migrations.AlterField(
            model_name='review',
            name='image2',
            field=models.ImageField(blank=True, upload_to=dinings.models.review_img_path),
        ),
        migrations.AlterField(
            model_name='review',
            name='image3',
            field=models.ImageField(blank=True, upload_to=dinings.models.review_img_path),
        ),
        migrations.AlterField(
            model_name='review',
            name='image4',
            field=models.ImageField(blank=True, upload_to=dinings.models.review_img_path),
        ),
        migrations.AlterField(
            model_name='review',
            name='image5',
            field=models.ImageField(blank=True, upload_to=dinings.models.review_img_path),
        ),
        migrations.CreateModel(
            name='PurposeTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purpose_tagged_items', to='dinings.review')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_purposetaggeditem_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_tagged_items', to='dinings.dining')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_pricetaggeditem_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MenuTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_tagged_items', to='dinings.dining')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_menutaggeditem_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FacilityaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facility_tagged_items', to='dinings.review')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_facilityaggeditem_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AtmosphereTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='atmosphere_tagged_items', to='dinings.review')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dinings_atmospheretaggeditem_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='dining',
            name='menu_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='menu_tags', through='dinings.MenuTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='dining',
            name='price_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='price_tags', through='dinings.PriceTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='review',
            name='atmosphere_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='atmosphere_tags', through='dinings.AtmosphereTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='review',
            name='facility_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='facility_tags', through='dinings.FacilityaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='review',
            name='purpose_tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='purpose_tags', through='dinings.PurposeTaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
